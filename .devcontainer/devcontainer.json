{
	// For quick reference: https://containers.dev/implementors/json_reference/
	"name": "NVIDIA PyTorch GPU",
	"image": "nvcr.io/nvidia/pytorch:25.06-py3",
	// Alternative recent versions if needed:
	// "image": "nvcr.io/nvidia/pytorch:25.05-py3",
	// "image": "nvcr.io/nvidia/pytorch:25.04-py3",
	// 1. Use 'forwardPorts' to make a list of ports inside the container available locally.
	"forwardPorts": [
		8265,
		8888, // Common port for Jupyter notebooks
		4000
	],
	// 2. Use 'mounts' to make a list of local directories available inside the container. More info: https://code.visualstudio.com/remote/advancedcontainers/add-local-file-mount
	// "mounts": [],
	// 3. Use 'runArgs' to pass arguments to the container. 
	// run the container with all GPUs and optimized settings for ML workloads
	"runArgs": [
		"--gpus",
		"all",
		"--ipc=host",
		"--ulimit",
		"memlock=-1",
		"--ulimit",
		"stack=67108864",
		"--hostname=ultrasonic-dev"
	],
	// 4. Features to add to the Dev Container. More info: https://containers.dev/implementors/features.
	"features": {
		// git
		"ghcr.io/devcontainers/features/git:1": {
			"version": "os-provided",
			"ppa": "false"
		}
	},
	// 5. Configure tool-specific properties.
	"customizations": {
		// Configure properties specific to VS Code.
		"vscode": {
			// Set *default* container specific settings.json values on container create.
			"settings": {
				"python.defaultInterpreterPath": "/usr/bin/python3",
				"python.terminal.activateEnvironment": true
			},
			// installs useful extensions
			"extensions": [
				"ms-python.python",
				"ms-python.debugpy",
				"ms-python.vscode-pylance",
				"ms-python.isort",
				"ms-toolsai.jupyter",
				"ms-toolsai.jupyter-keymap",
				"ms-toolsai.vscode-jupyter-cell-tags",
				"ms-toolsai.jupyter-renderers",
				"ms-toolsai.vscode-jupyter-slideshow",
				"ms-toolsai.tensorboard",
				"charliermarsh.ruff"
			]
		}
	},
	// 6. Set `remoteUser` to `root` to connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
	"remoteUser": "root",
	// the following commands are related to container lifecylce. More info: https://containers.dev/implementors/json_reference/#lifecycle-scripts
	// 7. Use 'initializeCommand' to run commands ON THE HOST before container is created or started.
	// "initializeCommand": "",
	// 8. Use 'onCreateCommand' to run commands INSIDE THE CONTAINER after it started for the first time.
	// "onCreateCommand": "",
	// 9. Use 'updateContentCommand' to run commands if the root filetree have any changes, during container creation.
	// "updateContentCommand": "",
	// 10. Use 'postCreateCommand' to run commands after the container is created.
	"postCreateCommand": "python -m pip install -r requirements.txt && python -m pip install -e .",
	// 11. Use 'postStartCommand' to run a command each time the container starts successfully.
	// "postStartCommand": "",
	// 12. Use 'postAttachCommand' to run a command each time a tool attaches to the container successfully. 
	// "postAttachCommand": "",
	// Environment variables
	"containerEnv": {
		"NVIDIA_VISIBLE_DEVICES": "all",
		"NVIDIA_DRIVER_CAPABILITIES": "compute,utility"
	}
}